[{"/Users/kojinglick/Dev/ReactChartJs/client/src/index.js":"1","/Users/kojinglick/Dev/ReactChartJs/client/src/App.js":"2","/Users/kojinglick/Dev/ReactChartJs/client/src/reportWebVitals.js":"3","/Users/kojinglick/Dev/ReactChartJs/client/src/components/Chart.js":"4"},{"size":500,"mtime":1611550668329,"results":"5","hashOfConfig":"6"},{"size":1148,"mtime":1612844923016,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611550668330,"results":"8","hashOfConfig":"6"},{"size":11922,"mtime":1612918135605,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"18chbul",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/kojinglick/Dev/ReactChartJs/client/src/index.js",[],["20","21"],"/Users/kojinglick/Dev/ReactChartJs/client/src/App.js",[],"/Users/kojinglick/Dev/ReactChartJs/client/src/reportWebVitals.js",[],"/Users/kojinglick/Dev/ReactChartJs/client/src/components/Chart.js",["22","23","24","25","26","27","28"],"import React, {Component} from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport Chart from \"chart.js\";\n\n// const fName = (symbol) => {\n//     let fN = '';\n//     switch (symbol) {\n//         case \"BTC\":\n//             fN = \"Bitcoin\";\n//             break;\n//         case \"ETH\":\n//             fN = \"Ethereum\";\n//             break;\n//         case \"LTC\":\n//             fN = \"Litecoin\";\n//             break;\n//         case \"LINK\":\n//             fN = \"Chainlink\";\n//             break;\n//         case \"EOS\":\n//             fN = \"EOS\";\n//             break;\n//         case \"XRP\":\n//             fN = \"XRP\";\n//             break;\n//         case \"OMG\":\n//             fN = \"OMG Network\";\n//             break;\n//         case \"BCH\":\n//             fN = \"Bitcoin Cash\";\n//             break;\n//         case \"TRX\":\n//             fN = \"TRON\";\n//             break;\n//         case \"JST\":\n//             fN = \"JUST\";\n//             break;\n//\n//     }\n//     return fN;\n// }\nconst formatMoney = (number, decPlaces, decSep, thouSep) => {\n    var sign = number < 0 ? \"-\" : \"\";\n    var i = String(parseInt(number = Math.abs(Number(number) || 0).toFixed(decPlaces)));\n    var j = (j = i.length) > 3 ? j % 3 : 0;\n\n    return sign +\n        (j ? i.substr(0, j) + thouSep : \"\") +\n        i.substr(j).replace(/(\\decSep{3})(?=\\decSep)/g, \"$1\" + thouSep) +\n        (decPlaces ? decSep + Math.abs(number - i).toFixed(decPlaces).slice(2) : \"\");\n}\n\n\n\nexport class LineGraph extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            times: [],\n            prices: [],\n            pRs: [],\n            pBCs: [],\n            articles: []\n        }\n    }\n\n    chartRef = React.createRef();\n\n    async componentDidMount() {\n        console.log('coinname:', this.props.coinName)\n\n        let articleHash = {}\n\n        let articleGet = `https://newsapi.org/v2/everything?q=${this.props.coinName}&apiKey=1b4fa439d5b04275a60ab73d2a80dfba&domains=decrypt.co,cointelegraph.com,coindesk.com&language=en&sortBy=relevancy`;\n        try {\n            const articles = await axios.get(articleGet)\n            const parsed = articles.data.articles;\n            for (let i = 0; i < parsed.length; i++) {\n                if (articleHash[moment(parsed[i].publishedAt).format('YYYY-MM-DD')]) {\n                    // console.log('triggered')\n                    articleHash[moment(parsed[i].publishedAt).format('YYYY-MM-DD')] += 1;\n                } else {\n                    articleHash[moment(parsed[i].publishedAt).format('YYYY-MM-DD')] = 1;\n                }\n            }\n\n            this.setState({articles: parsed})\n        } catch (e) {\n            console.log(e)\n        }\n\n        let pricesGet = `https://min-api.cryptocompare.com/data/v2/histoday?fsym=${this.props.coinName}&tsym=USD&limit=30&api_key=790056f1184b84f5b7cc92c3e0bde7d7362f02563fb4899d9b763f436795fe55`;\n        try {\n            const articles = await axios.get(pricesGet)\n            const parsed = articles.data.Data.Data;\n\n            console.log(articleHash);\n            // for (let i = 0; i < articleArr.length; i++) {\n            //     if (published )\n            //     console.log(articleArr[i])\n            // }\n\n            for (let i = 0; i < parsed.length; i++) {\n                if (articleHash[moment.unix(parsed[i].time).format('YYYY-MM-DD')] > 0 && articleHash[moment.unix(parsed[i].time).format('YYYY-MM-DD')] < 2) {\n                    console.log('sweet')\n                    this.setState({\n                        times: [...this.state.times, moment.unix(parsed[i].time).format('YYYY-MM-DD')],\n                        prices: [...this.state.prices, parsed[i].close],\n                        pRs: [...this.state.pRs, 2 ** articleHash[moment.unix(parsed[i].time).format('YYYY-MM-DD')]],\n                        pBCs: [...this.state.pBCs, 'orange']\n                    })\n                } else if (articleHash[moment.unix(parsed[i].time).format('YYYY-MM-DD')] > 1) {\n                    console.log('too high')\n                    this.setState({\n                        times: [...this.state.times, moment.unix(parsed[i].time).format('YYYY-MM-DD')],\n                        prices: [...this.state.prices, parsed[i].close],\n                        pRs: [...this.state.pRs, 9],\n                        pBCs: [...this.state.pBCs, 'red']\n                    })\n                } else {\n                    this.setState({\n                        times: [...this.state.times, moment.unix(parsed[i].time).format('YYYY-MM-DD')],\n                        prices: [...this.state.prices, parsed[i].close],\n                        pRs: [...this.state.pRs, 1],\n                        pBCs: [...this.state.pBCs, 'green']\n                    })\n                }\n            }\n        } catch (e) {\n            console.log(e)\n        }\n\n\n        let arties = this.state.articles;\n\n        // console.log('arties', arties)\n\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        const chart = new Chart(myChartRef, {\n            type: 'line',\n            data: {\n                labels: this.state.times,\n                datasets: [{\n                    label: this.props.coinName,\n                    data: this.state.prices,\n                    pointRadius: this.state.pRs,\n                    borderColor: this.state.pBCs\n                }],\n            },\n            options: {\n                events: [\"click\", \"mousemove\"],\n                // elements: {\n                //     point: {\n                //         radius: 5,\n                //         hoverRadius: 10,\n                //     },\n                // },\n\n                legend: {\n                    display: false,\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            // Include a dollar sign in the ticks\n                            callback: function (value, index, values) {\n                                console.log('value', formatMoney(value, 2, '.', ','))\n                                return '$' + formatMoney(value, value > 9999 ? 0 : 2, '.', ',');\n                            }\n                        }\n                    }]\n\n                },\n\n                tooltips: {\n                    callbacks: {\n                        label: (item) => `${chart.data.datasets[0].label}: $${formatMoney(item.value, item.value > 9999 ? 0 : 2, '.', ',')}`\n                    },\n                    enabled: false,\n                    custom: function (tooltipModel) {\n                        // Tooltip Element\n                        var tooltipEl = document.getElementById('chartjs-tooltip');\n\n\n                        // Create element on first render\n                        if (!tooltipEl) {\n                            tooltipEl = document.createElement('div');\n                            tooltipEl.id = 'chartjs-tooltip';\n                            tooltipEl.innerHTML = '<table></table>';\n                            document.body.appendChild(tooltipEl);\n                        }\n\n                        // Hide if no tooltip\n                        if (tooltipModel.opacity === 0) {\n                            // tooltipEl.style.opacity = 0;\n                            return;\n                        }\n\n                        // Set caret Position\n                        tooltipEl.classList.remove('above', 'below', 'no-transform');\n                        if (tooltipModel.yAlign) {\n                            tooltipEl.classList.add(tooltipModel.yAlign);\n                        } else {\n                            tooltipEl.classList.add('no-transform');\n                        }\n\n                        function getBody(bodyItem) {\n                            return bodyItem.lines;\n                        }\n\n                        // Set Text\n                        if (tooltipModel.body) {\n                            var titleLines = tooltipModel.title || [];\n                            var bodyLines = tooltipModel.body.map(getBody);\n\n                            var innerHtml = '<thead>';\n\n                            // Articles\n\n\n                            titleLines.forEach(function (title) {\n                                for (let i = 0; i < arties.length; i++) {\n                                    // console.log(moment(arties[i].publishedAt).format('YYYY-MM-DD'));\n                                    if (title === moment(arties[i].publishedAt).format('YYYY-MM-DD')) {\n                                        console.log('match')\n                                        innerHtml += '<tr style=\"border-top: 1px solid #d0d0d0;\"><th position=relative style=\"background-color: transparent;\">' + `<a href=${arties[i].url} target=\"_blank\"><img src=\"${arties[i].urlToImage}\"; position=absolute; width=\"100px\" style=\"padding-right: 10px;\"/></a>` + '</th><td>' + `<a href=${arties[i].url} target=\"_blank\" style=\"line-height: 1\">${arties[i].title}</a>` + `<p>${arties[i].source.name}</p>` + '</td></tr>';\n\n                                    }\n\n                                }\n                            });\n                            innerHtml += '</thead><tbody>';\n\n                            bodyLines.forEach(function (body, i) {\n\n                                var colors = tooltipModel.labelColors[i];\n                                var style = 'background:' + colors.backgroundColor;\n                                style += '; border-color:' + colors.borderColor;\n                                style += '; border-width: 2px';\n                                var span = '<span style=\"' + style + '\"></span>';\n                                innerHtml += '<tr><td>' + span + body + '</td></tr>';\n                            });\n                            innerHtml += '</tbody>';\n\n                            var tableRoot = tooltipEl.querySelector('table');\n                            tableRoot.innerHTML = innerHtml;\n                        }\n\n                        // `this` will be the overall tooltip\n                        var position = this._chart.canvas.getBoundingClientRect();\n\n                        // Display, position, and set styles for font\n                        tooltipEl.style.opacity = 1;\n                        tooltipEl.style.width = 'auto';\n                        tooltipEl.style.maxWidth = '300px'\n                        tooltipEl.style.backgroundColor = \"rgba(255,255,255,0.7)\";\n                        tooltipEl.style.position = 'absolute';\n\n                        if (tooltipModel.caretX > window.innerWidth / 2) {\n                            tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX-100 + 'px';\n                            tooltipEl.style.textAlign = 'right';\n                        } else {\n                            tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';\n                            tooltipEl.style.textAlign = 'left';\n                        }\n                        // console.log(tooltipEl.style);\n\n\n                        tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';\n                        tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;\n                        tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';\n                        tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;\n                        tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';\n                    }\n                }\n            },\n\n\n        });\n\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.times ?\n                    <canvas\n                        id=\"myChart\"\n                        ref={this.chartRef}\n                    />\n                    : null}\n\n            </div>\n        )\n    }\n}\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":46,"column":14,"nodeType":"35","messageId":"36","endLine":46,"endColumn":15},{"ruleId":"33","severity":1,"message":"34","line":46,"column":34,"nodeType":"35","messageId":"36","endLine":46,"endColumn":35},{"ruleId":"37","severity":1,"message":"38","line":229,"column":161,"nodeType":"39","messageId":"40","endLine":229,"endColumn":162},{"ruleId":"37","severity":1,"message":"38","line":229,"column":310,"nodeType":"39","messageId":"40","endLine":229,"endColumn":311},{"ruleId":"37","severity":1,"message":"38","line":229,"column":324,"nodeType":"39","messageId":"40","endLine":229,"endColumn":325},{"ruleId":"37","severity":1,"message":"38","line":229,"column":415,"nodeType":"39","messageId":"40","endLine":229,"endColumn":416},{"ruleId":"37","severity":1,"message":"38","line":229,"column":451,"nodeType":"39","messageId":"40","endLine":229,"endColumn":452},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-use-before-define","'j' was used before it was defined.","Identifier","usedBeforeDefined","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]